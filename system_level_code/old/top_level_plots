          plots_to_make = ["Total Chip Power dBm", "Total Electronics Power dBm", "Total Laser Power from Wall dBm"]
          #plots_to_make = ["Total Combined Electronics Power"]
          #y_labels_plots = ["mW", "mm^2"]
          #color_options = [["indianred", "brown", "red", "coral", "lightsalmon"], ["forestgreen", "limegreen", "darkgreen", "olivedrab", "mediumseagreen"], ["navy", "royalblue", "dodgerblue", "blue", "cornflowerblue"]]
          color_options = ["green", "blue", "red", "purple", "black", "orange"]
          marker_options = ["o", "s", "*", "v"]
          line_options = ["--", "-.", ":"]
          opacity_options = [0.5, 0.7, 0.9]
          #opacity = [0.9, 0.5, 0.1]
          markersize_options = [4, 6, 8, 10]
          
          xticks = []
          for col in chip_specs_all_symbol_rates[0]:
             label = str(int(SS_inputs_all.loc["Systolic Array Rows", col])) + " x " + str(int(SS_inputs_all.loc["Systolic Array Cols", col]))
             xticks.append(label)
     
          legend = []
          fig, ax = plt.subplots()
          for index_plot, plot_output in enumerate(plots_to_make):
               for index_symbol_rate, symbol_rate in enumerate(symbol_rate_options):
                    chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(alpha = opacity_options[index_symbol_rate], linestyle = line_options[index_symbol_rate], \
                                   marker = marker_options[index_symbol_rate], linewidth=1, markersize=markersize_options[index_symbol_rate], kind = 'line', ax = ax, color = color_options[index_plot])
                    #chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(marker = "o",  mfc='none', linewidth=1, markersize=7, kind = 'line', ax = ax, color = color_options[index_plot][index_symbol_rate])
                    legend.append(plot_output + ", "+ str(symbol_rate/ghz) + " GHz")
     
          plt.xticks(np.arange(len(xticks)), xticks) 
          #plt.ylabel(y_labels_plots[index_plot])
          plt.ylabel("dBm")
          plt.xlabel("Array Size")
          plt.grid()
          plt.legend(legend, prop={"size":6})
          plt.savefig(SS_inOut_file_path + NN_file_name + "_power.png", dpi = 700)
          plt.show()
    

          '''
          plots_to_make = ["Total Chip Area", "Total Electronics Area", "Total Photonics Area"]
          #plots_to_make = ["Total Combined Electronics Power"]
          #y_labels_plots = ["mW", "mm^2"]
          #color_options = [["indianred", "brown", "red", "coral", "lightsalmon"], ["forestgreen", "limegreen", "darkgreen", "olivedrab", "mediumseagreen"], ["navy", "royalblue", "dodgerblue", "blue", "cornflowerblue"]]
          color_options = ["green", "blue", "red", "purple", "black", "orange"]
          marker_options = ["o", "s", "*", "v"]
          line_options = ["--", "-.", ":"]
          opacity_options = [0.5, 0.7, 0.9]
          #opacity = [0.9, 0.5, 0.1]
          markersize_options = [4, 6, 8, 10]
          
          xticks = []
          for col in chip_specs_all_symbol_rates[0]:
             label = str(int(SS_inputs_all.loc["Systolic Array Rows", col])) + " x " + str(int(SS_inputs_all.loc["Systolic Array Cols", col]))
             xticks.append(label)
     
          legend = []
          fig, ax = plt.subplots()
          for index_plot, plot_output in enumerate(plots_to_make):
               for index_symbol_rate, symbol_rate in enumerate(symbol_rate_options):
                    chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(alpha = opacity_options[index_symbol_rate], linestyle = line_options[index_symbol_rate], \
                                   marker = marker_options[index_symbol_rate], linewidth=1, markersize=markersize_options[index_symbol_rate], kind = 'line', ax = ax, color = color_options[index_plot])
                    #chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(marker = "o",  mfc='none', linewidth=1, markersize=7, kind = 'line', ax = ax, color = color_options[index_plot][index_symbol_rate])
                    legend.append(plot_output + ", "+ str(symbol_rate/ghz) + " GHz")
     
          plt.xticks(np.arange(len(xticks)), xticks) 
          #plt.ylabel(y_labels_plots[index_plot])
          plt.ylabel("mm^2")
          plt.xlabel("Array Size")
          plt.grid()
          plt.legend(legend, prop={"size":6})
          plt.savefig(SS_inOut_file_path + NN_file_name + "_area.png", dpi = 700)
          plt.show()
          
          
          plots_to_make = ["Inferences Per Second", "Inferences Per Second Per Watt"]
          #plots_to_make = ["Total Combined Electronics Power"]
          #y_labels_plots = ["mW", "mm^2"]
          #color_options = [["indianred", "brown", "red", "coral", "lightsalmon"], ["forestgreen", "limegreen", "darkgreen", "olivedrab", "mediumseagreen"], ["navy", "royalblue", "dodgerblue", "blue", "cornflowerblue"]]
          color_options = ["green", "blue", "red", "purple", "black", "orange"]
          marker_options = ["o", "s", "*", "v"]
          line_options = ["--", "-.", ":"]
          opacity_options = [0.5, 0.7, 0.9]
          #opacity = [0.9, 0.5, 0.1]
          markersize_options = [4, 6, 8, 10]
          
          xticks = []
          for col in chip_specs_all_symbol_rates[0]:
             label = str(int(SS_inputs_all.loc["Systolic Array Rows", col])) + " x " + str(int(SS_inputs_all.loc["Systolic Array Cols", col]))
             xticks.append(label)
     
          legend_items = []
          legend_items_2 = []
          fig, ax = plt.subplots()
          ax2 = ax.twinx()
          for index_plot, plot_output in enumerate(plots_to_make):
               if index_plot == 0:
                    rel_ax = ax
               else:
                    rel_ax = ax2
               for index_symbol_rate, symbol_rate in enumerate(symbol_rate_options):
                    chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(alpha = opacity_options[index_symbol_rate], linestyle = line_options[index_symbol_rate], \
                                   marker = marker_options[index_symbol_rate], linewidth=1, markersize=markersize_options[index_symbol_rate], kind = 'line', ax = rel_ax, color = color_options[index_plot])
                    #chip_specs_all_symbol_rates[index_symbol_rate].loc[plot_output].plot(marker = "o",  mfc='none', linewidth=1, markersize=7, kind = 'line', ax = ax, color = color_options[index_plot][index_symbol_rate])
                    if (index_plot == 0):
                         legend_items.append(plot_output + ", "+ str(symbol_rate/ghz) + " GHz")
                    else:
                         legend_items_2.append(plot_output + ", "+ str(symbol_rate/ghz) + " GHz")
     
          plt.xticks(np.arange(len(xticks)), xticks) 
          #plt.ylabel(y_labels_plots[index_plot])
          plt.ylabel("")
          plt.xlabel("Array Size")
          plt.grid()
          print("legend", legend_items, legend_items_2)
          ax.legend(legend_items, prop={"size":6})
          ax2.legend(legend_items_2, prop={"size":6})
          plt.savefig(SS_inOut_file_path + NN_file_name + "_inferences.png", dpi = 700)
          plt.show() 
          '''
